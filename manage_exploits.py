# manage_exploits.py

import json
from pprint import pprint  # Para melhor formatação na exibição

def load_exploits(file_path):
    with open(file_path, 'r') as file:
        return json.load(file)

def save_exploits(file_path, exploits):
    with open(file_path, 'w') as file:
        json.dump(exploits, file, indent=4)

def display_exploits(exploits):
    if not exploits:
        print("Nenhum exploit encontrado.")
    for exploit in exploits:
        print(f"ID: {exploit['id']}")
        print(f"Título: {exploit['title']}")
        print(f"Descrição: {exploit['description']}")
        print(f"Gravidade: {exploit['severity']}")
        print(f"Tipo de Vulnerabilidade: {exploit['vulnerability_type']}")
        print(f"Sistemas Afetados: {', '.join(exploit['affected_systems'])}")
        print(f"Referências: {', '.join(exploit['references'])}")
        print(f"Data de Descoberta: {exploit['discovery_date']}")
        print(f"Autor: {exploit['author']}")
        print(f"Status: {exploit['status']}")
        print(f"Palavras-chave: {', '.join(exploit['keywords'])}")
        print("-" * 40)

def add_exploit(exploits):
    new_id = max(exploit['id'] for exploit in exploits) + 1
    title = input("Título: ")
    description = input("Descrição: ")
    severity = input("Gravidade: ")
    vulnerability_type = input("Tipo de Vulnerabilidade: ")
    affected_systems = input("Sistemas Afetados (separados por vírgula): ").split(',')
    references = input("Referências (separadas por vírgula): ").split(',')
    discovery_date = input("Data de Descoberta: ")
    author = input("Autor: ")
    status = input("Status: ")
    keywords = input("Palavras-chave (separadas por vírgula): ").split(',')

    new_exploit = {
        "id": new_id,
        "title": title,
        "description": description,
        "severity": severity,
        "vulnerability_type": vulnerability_type,
        "affected_systems": [system.strip() for system in affected_systems],
        "references": [ref.strip() for ref in references],
        "discovery_date": discovery_date,
        "author": author,
        "status": status,
        "keywords": [keyword.strip() for keyword in keywords]
    }
    exploits.append(new_exploit)
    return exploits

def edit_exploit(exploits):
    exploit_id = int(input("Digite o ID do exploit que deseja editar: "))
    exploit = next((exp for exp in exploits if exp['id'] == exploit_id), None)
    
    if exploit:
        print("Editando exploit:")
        display_exploits([exploit])
        exploit['title'] = input("Novo Título (deixe em branco para não alterar): ") or exploit['title']
        exploit['description'] = input("Nova Descrição (deixe em branco para não alterar): ") or exploit['description']
        exploit['severity'] = input("Nova Gravidade (deixe em branco para não alterar): ") or exploit['severity']
        exploit['vulnerability_type'] = input("Novo Tipo de Vulnerabilidade (deixe em branco para não alterar): ") or exploit['vulnerability_type']
        exploit['affected_systems'] = input("Novos Sistemas Afetados (separados por vírgula, deixe em branco para não alterar): ").split(',') or exploit['affected_systems']
        exploit['references'] = input("Novas Referências (separadas por vírgula, deixe em branco para não alterar): ").split(',') or exploit['references']
        exploit['discovery_date'] = input("Nova Data de Descoberta (deixe em branco para não alterar): ") or exploit['discovery_date']
        exploit['author'] = input("Novo Autor (deixe em branco para não alterar): ") or exploit['author']
        exploit['status'] = input("Novo Status (deixe em branco para não alterar): ") or exploit['status']
        exploit['keywords'] = input("Novas Palavras-chave (separadas por vírgula, deixe em branco para não alterar): ").split(',') or exploit['keywords']
    
    else:
        print("Exploit não encontrado.")

def main():
    file_path = 'exploits.json'
    exploits = load_exploits(file_path)

    while True:
        print("\nGerenciador de Exploits")
        print("1. Listar Exploits")
        print("2. Adicionar Exploit")
        print("3. Editar Exploit")
        print("4. Sair")
        choice = input("Escolha uma opção: ")

        if choice == '1':
            display_exploits(exploits)
        elif choice == '2':
            exploits = add_exploit(exploits)
            save_exploits(file_path, exploits)
            print("Exploit adicionado com sucesso.")
        elif choice == '3':
            edit_exploit(exploits)
            save_exploits(file_path, exploits)
            print("Exploit editado com sucesso.")
        elif choice == '4':
            break
        else:
            print("Opção inválida. Tente novamente.")

if __name__ == "__main__":
    main()